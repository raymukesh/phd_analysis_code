library(sf)
world_temp_robin <- projectRaster(
from = world_temp,
crs = crs(World)
) %>% mask(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = crs(World)
) %>% mask(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = crs(World)
)
data("World")
World <- data("World") # Load world vector (available after load tmap)
world_temp_robin <- projectRaster(
from = world_temp,
crs = crs(World)
)
data("World")
View(World)
crs(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = crs("+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ")
) %>% mask(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs "
) %>% mask(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
) %>% mask(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
)
world_temp_robin <- projectRaster(
from = world_temp,
crs = +proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
)
st_crs(World)
world_temp_robin <- projectRaster(
from = world_temp,
crs = "+proj=longlat +datum=WGS84"
)
world_temp_robin <- projectRaster(
from = world_temp,
crs = "+proj=longlat +datum=WGS84"
)
world_temp_robin <- projectRaster(
from = world_temp,
crs = "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
library(sf)
load(url("http://github.com/mgimond/Spatial/raw/master/Data/Sample1.RData"))
load(url("http://github.com/mgimond/Spatial/raw/master/Data/Sample1.RData"))
rm(list=c("inter.sf", "p.sf", "rail.sf"))
sf_extSoftVersion()[1:3]
st_crs(s.sf)
library(raster)
crs(elev.r)
s.sf <- st_set_crs(s.sf, "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83")
st_crs(s.sf)
s.sf <- st_set_crs(s.sf, 26919)
st_crs(s.sf)
crs(elev.r) <- "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83"
crs(elev.r)
crs(elev.r) <- "+init=EPSG:26919"
crs(elev.r) <- "+init=EPSG:26919"
crs(elev.r) <- "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83"
crs(elev.r)
install.packages("forecast")
install.packages("tmap")
install.packages("modeltime")
install.packages("timetk")
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
library(tidyverse)
bike_sharing_daily
?bike_sharing_daily
bike_transactions_tbl <- bike_sharing_daily %>%
select(dteday, cnt
bike_sharing_daily %>%
select(dteday, cnt)
bike_transactions_tbl <- bike_sharing_daily %>%
select(dteday, cnt) %>%
set_names(c("date", "value"))
View(bike_transactions_tbl)
bike_sharing_daily %>%
select(dteday, cnt)
bike_transactions_tbl %>%
plot_time_series(date, value, .interactive = T)
bike_transactions_tbl %>%
plot_time_series(date, value, .interactive = F)
bike_transactions_tbl %>%
time_series_split(assess = "3 months", cumulative = T)
bike_transactions_tbl$date[-1]
bike_transactions_tbl$date[-1,]
bike_transactions_tbl$date[1,]
bike_transactions_tbl$date[1]
bike_transactions_tbl$date[len(bike_transactions_tbl)]
bike_transactions_tbl$date[length(bike_transactions_tbl)]
length(bike_transactions_tbl)
dim(bike_transactions_tbl)
nrwo(bike_transactions_tbl)
nrow(bike_transactions_tbl)
bike_transactions_tbl$date[nrow(bike_transactions_tbl)]
bike_transactions_tbl$date[nrow(bike_transactions_tbl)] - bike_transactions_tbl$date[1]
bike_transactions_tbl$date[nrow(bike_transactions_tbl)] - bike_transactions_tbl$date[1] + 1
(bike_transactions_tbl$date[nrow(bike_transactions_tbl)] - bike_transactions_tbl$date[1] + 1)/30
month(bike_transactions_tbl$date[nrow(bike_transactions_tbl)]) - month(bike_transactions_tbl$date[1])
split <- tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, value, .interactive = T)
split <- bike_transactions_tbl %>%
time_series_split(assess = "3 months", cumulative = T)
split <- tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, value, .interactive = T)
split <- bike_transactions_tbl %>%
time_series_split(assess = "3 months", cumulative = T)
split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, value, .interactive = T)
model_fit_arima <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(value~date, training(split))
model_fit_arima
model_fit_prophet <- prophet_reg(seasonality_yearly = TRUE) %>%
set_engine("prophet") %>%
fit(value ~ date, training(split))
model_fit_prophet
recipe_spec <- recipe(value ~ date, training(splits)) %>%
step_timeseries_signature(date) %>%
step_rm(contains("am.pm"), contains("hour"), contains("minute"),
contains("second"), contains("xts")) %>%
step_fourier(date, period = 365, K = 5) %>%
step_dummy(all_nominal())
bike_transactions_tbl <- bike_sharing_daily %>%
select(dteday, cnt) %>%
set_names(c("date", "value"))
bike_transactions_tbl %>%
plot_time_series(date, value, .interactive = F)
splits <- bike_transactions_tbl %>%
time_series_splits(assess = "3 months", cumulative = T)
splits %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, value, .interactive = T)
model_fit_arima <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(value~date, training(splits))
model_fit_arima
model_fit_prophet <- prophet_reg(seasonality_yearly = TRUE) %>%
set_engine("prophet") %>%
fit(value ~ date, training(splits))
model_fit_prophet
recipe_spec <- recipe(value ~ date, training(splitss)) %>%
step_timeseries_signature(date) %>%
step_rm(contains("am.pm"), contains("hour"), contains("minute"),
contains("second"), contains("xts")) %>%
step_fourier(date, period = 365, K = 5) %>%
step_dummy(all_nominal())
recipe_spec %>% prep() %>% juice()
recipe_spec <- recipe(value ~ date, training(splitss)) %>%
step_timeseries_signature(date) %>%
step_rm(contains("am.pm"), contains("hour"), contains("minute"),
contains("second"), contains("xts")) %>%
step_fourier(date, period = 365, K = 5) %>%
step_dummy(all_nominal())
recipe_spec <- recipe(value ~ date, training(splits)) %>%
step_timeseries_signature(date) %>%
step_rm(contains("am.pm"), contains("hour"), contains("minute"),
contains("second"), contains("xts")) %>%
step_fourier(date, period = 365, K = 5) %>%
step_dummy(all_nominal())
bike_transactions_tbl <- bike_sharing_daily %>%
select(dteday, cnt) %>%
set_names(c("date", "value"))
bike_transactions_tbl %>%
plot_time_series(date, value, .interactive = F)
splits <- bike_transactions_tbl %>%
time_series_splits(assess = "3 months", cumulative = T)
splits <- bike_transactions_tbl %>%
time_series_split(assess = "3 months", cumulative = T)
splits %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, value, .interactive = T)
model_fit_arima <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(value~date, training(splits))
model_fit_arima
model_fit_prophet <- prophet_reg(seasonality_yearly = TRUE) %>%
set_engine("prophet") %>%
fit(value ~ date, training(splits))
model_fit_prophet
recipe_spec <- recipe(value ~ date, training(splits)) %>%
step_timeseries_signature(date) %>%
step_rm(contains("am.pm"), contains("hour"), contains("minute"),
contains("second"), contains("xts")) %>%
step_fourier(date, period = 365, K = 5) %>%
step_dummy(all_nominal())
recipe_spec %>% prep() %>% juice()
model_spec_glmnet <- linear_reg(penalty = 0.01, mixture = 0.5) %>%
set_engine("glmnet")
workflow_fit_glmnet <- workflow() %>%
add_model(model_spec_glmnet) %>%
add_recipe(recipe_spec %>% step_rm(date)) %>%
fit(training(splits))
workflow_fit_rf <- workflow() %>%
add_model(model_spec_rf) %>%
add_recipe(recipe_spec %>% step_rm(date)) %>%
fit(training(splits))
model_spec_rf <- rand_forest(trees = 500, min_n = 50) %>%
set_engine("randomForest")
workflow_fit_rf <- workflow() %>%
add_model(model_spec_rf) %>%
add_recipe(recipe_spec %>% step_rm(date)) %>%
fit(training(splits))
install.packages("randomForest")
library(randomForest)
workflow_fit_rf <- workflow() %>%
add_model(model_spec_rf) %>%
add_recipe(recipe_spec %>% step_rm(date)) %>%
fit(training(splits))
model_spec_prophet_boost <- prophet_boost(seasonality_yearly = TRUE) %>%
set_engine("prophet_xgboost")
workflow_fit_prophet_boost <- workflow() %>%
add_model(model_spec_prophet_boost) %>%
add_recipe(recipe_spec) %>%
fit(training(splits))
workflow_fit_prophet_boost
model_table <- modeltime_table(
model_fit_arima,
model_fit_prophet,
workflow_fit_glmnet,
workflow_fit_rf,
workflow_fit_prophet_boost
)
model_table
calibration_table <- model_table %>%
modeltime_calibrate(testing(splits))
calibration_table
calibration_table %>%
modeltime_forecast(actual_data = bike_transactions_tbl) %>%
plot_modeltime_forecast(.interactive = FALSE)
calibration_table %>%
modeltime_forecast(actual_data = bike_transactions_tbl) %>%
plot_modeltime_forecast(.interactive = T)
calibration_table %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
calibration_table %>%
# Remove ARIMA model with low accuracy
filter(.model_id != 1) %>%
# Refit and Forecast Forward
modeltime_refit(bike_transactions_tbl) %>%
modeltime_forecast(h = "12 months", actual_data = bike_transactions_tbl) %>%
plot_modeltime_forecast(.interactive = FALSE)
normal <- rnorm(100, mean = 5, sd = 3)
normal
plot(normal)
normal <- rnorm(100, mean = 5, sd = 1)
plot(normal)
normal <- rnorm(100, mean = 5, sd = 0)
plot(normal)
normal
normal <- rnorm(100, mean = 5, sd = 0.1)
plot(normal)
normal <- rnorm(100, mean = 2, sd = 0.1)
plot(normal)
normal
barplot(normal)
normal <- rnorm(100, mean = 2, sd = 2)
barplot(normal)
ls()
rm(list=ls())
citation()
load("D:/OneDrive - UTS/PhD_UTS/Stage 3/Master Data Sheets/R Calculations/phd_analysis_code/Change Analysis/changeAnalysis_data.RData")
## Sankey diagram for all the years
sankeyLand(dataset = SL_1990_2020$lulc_Multistep,
legendtable = SL_1990_2020$tb_legend)
## check the table
head(SL_1990_2020)
names(SL_1990_2020)
SL_1990_2020$lulc_Multistep
all_years_contingency_v4 <- SL_1990_2020$lulc_Multistep
View(all_years_contingency_v4)
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
testSL
all_transition_v4 <- testSL$lulc_table
View(all_transition_v4)
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
list.files("D:/OneDrive - UTS/PhD_UTS/Stage 3/Analysis/Prediction/ForTerrset60_v4", pattern = ".tif")
year1990 <- raster("final_1990_v4.tif")
year1995 <- raster("final_1995_v4.tif")
landcover <- data.frame(year1990=values(year1990), year1995=values(year1995))
library(raster)
year1990 <- raster("final_1990_v4.tif")
list.files("D:/OneDrive - UTS/PhD_UTS/Stage 3/Analysis/Prediction/ForTerrset60_v4", pattern = ".tif")
## Read all the classified raster files
year1990 <- raster("D:/OneDrive - UTS/PhD_UTS/Stage 3/Analysis/Prediction/ForTerrset60_v4/final_1990_v4.tif")
year1995 <- raster("D:/OneDrive - UTS/PhD_UTS/Stage 3/Analysis/Prediction/ForTerrset60_v4/final_1995_v4.tif")
landcover <- data.frame(year1990=values(year1990), year1995=values(year1995))
landcover_change <- table(landcover)
landcover_change_matrix <- (round(addmargins(landcover_change)*3600/1000000, digits = 1))
setwd("D:/OneDrive - UTS/PhD_UTS/Stage 3/Master Data Sheets/R Calculations/phd_analysis_code/Change Matrix")
write.table(landcover_change_matrix, file = "matrix_1990_1995.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
all_transition_v4 <- testSL$lulc_table
View(all_transition_v4)
write.csv(all_transition_v4, file = "all_transitions_v4.csv", row.names = F)
SL_1990_2020$lulc_Multistep
mean(c(0.26,-0.01,0.07,-0.02,0.06))
mean(c(0.26,0.01,0.07,0.02,0.06))
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
year2020 <- raster("D:/OneDrive - UTS/PhD_UTS/Stage 3/Analysis/Prediction/ForTerrset60_v4/final_2020_v4.tif")
## Intensity of changes between builtup and agriculture
testSL <- intensityAnalysis(dataset = SL_1990_2020,
category_n = "Builtup", category_m = "Agriculture")
all_transition_v4 <- testSL$lulc_table
View(all_transition_v4)
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
testSL$interval_lvl
library(kableExtra)
testSL$interval_lvl %>% kbl()
testSL$interval_lvl
as.data.frame(testSL$interval_lvl) %>% kbl()
landcoverYear1990<-cbind(rowSums(round(table(landcover)*3600*1/1000000,digits = 1)))
View(landcoverYear1990)
landcoveryear1995 <- cbind(colSums(round(table(landcover)*3600*1/1000000,digits = 1)))
View(landcoveryear1995)
Year1990percentage <- cbind(round((landcoverYear1990/sum(landcoverYear1990)*100),digits = 1))
View(Year1990percentage)
Year1995percentage <- cbind(round((landcoverYear1995/sum(landcoverYear1995)*100),digits = 1))
landcoveryear1995 <- cbind(colSums(round(table(landcover)*3600*1/1000000,digits = 1)))
Year1995percentage <- cbind(round((landcoverYear1995/sum(landcoverYear1995)*100),digits = 1))
landcoverYear1995 <- cbind(colSums(round(table(landcover)*3600*1/1000000,digits = 1)))
Year1995percentage <- cbind(round((landcoverYear1995/sum(landcoverYear1995)*100),digits = 1))
Difference <- cbind(c(landcoverYear1995)-c(landcoverYear1990))
View(Difference)
percentageDifference <-(Difference/landcoverYear1990)*100
View(percentageDifference)
FinalTable <- cbind(c(landcoverYear1990),
c(landcoverYear1995),c(Difference),
c(Year1990percentage),c(Year1995percentage),
c(percentageDifference))
View(FinalTable)
colnames(FinalTable) <- c("Year 1990","Year 1995","Difference","Year 1990 % of Total",
"Year 1995 % of Total","% Difference")
netgrossplot(dataset = SL_1990_2020$lulc_Multistep,
legendtable = SL_1990_2020$tb_legend,
xlab = "LUC Category",
ylab = bquote("Area (" ~ km^2 ~ ")"),
changesLabel = c(GC = "Gross changes", NG = "Net Gain", NL = "Net Loss"),
color = c(GC = "gray70", NG = "#006400", NL = "#EE2C2C"))
testSL$category_lvlGain
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
testSL$category_lvlGain
testSL$category_lvlGain
testSL$interval_lvl
netgrossplot(dataset = SL_1990_2020$lulc_Multistep,
legendtable = SL_1990_2020$tb_legend,
xlab = "LUC Category",
ylab = bquote("Area (" ~ km^2 ~ ")"),
changesLabel = c(GC = "Gross changes", NG = "Net Gain", NL = "Net Loss"),
color = c(GC = "gray70", NG = "#006400", NL = "#EE2C2C"))
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
landcover <- data.frame(year1995=values(year1995), year2000=values(year2000))
landcover_change <- table(landcover)
landcover_change_matrix <- (round(addmargins(landcover_change)*3600/1000000, digits = 1))
write.table(landcover_change_matrix, file = "matrix_1995_2000.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
setwd("D:/OneDrive - UTS/PhD_UTS/Stage 3/Master Data Sheets/R Calculations/phd_analysis_code/Change Matrix")
write.table(landcover_change_matrix, file = "matrix_1995_2000.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
landcover <- data.frame(year2000=values(year2000), year2005=values(year2005))
landcover_change <- table(landcover)
landcover_change_matrix <- (round(addmargins(landcover_change)*3600/1000000, digits = 1))
write.table(landcover_change_matrix, file = "matrix_2000_2005.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
landcover <- data.frame(year2005=values(year2005), year2010=values(year2010))
landcover_change <- table(landcover)
landcover_change_matrix <- (round(addmargins(landcover_change)*3600/1000000, digits = 1))
write.table(landcover_change_matrix, file = "matrix_2005_2010.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
landcover <- data.frame(year2010=values(year2010), year2015=values(year2015))
landcover_change <- table(landcover)
landcover_change_matrix <- (round(addmargins(landcover_change)*3600/1000000, digits = 1))
write.table(landcover_change_matrix, file = "matrix_2010_2015.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
landcover <- data.frame(year2015=values(year2015), year2020=values(year2020))
landcover <- data.frame(year2015=values(year2015), year2020=values(year2020))
landcover_change <- table(landcover)
landcover_change_matrix <- (round(addmargins(landcover_change)*3600/1000000, digits = 1))
write.table(landcover_change_matrix, file = "matrix_2015_2020.csv", append = T, sep = ",", col.names = NA,
row.names = T, quote = F)
## change the legend names and colors
SL_1990_2020$tb_legend$color <- c("#4472C4", "green", "red", "yellow", "#BF9000")
SL_1990_2020$tb_legend$categoryName <- factor(c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"),
levels = c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"))
## Intensity of changes between builtup and agriculture
testSL <- intensityAnalysis(dataset = SL_1990_2020,
category_n = "Builtup", category_m = "Agriculture")
all_transition_v4 <- testSL$lulc_table
View(all_transition_v4)
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
## change the legend names and colors
SL_1990_2020$tb_legend$color <- c("#4472C4", "green", "red", "ffd60a", "#BF9000")
SL_1990_2020$tb_legend$categoryName <- factor(c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"),
levels = c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"))
## Intensity of changes between builtup and agriculture
testSL <- intensityAnalysis(dataset = SL_1990_2020,
category_n = "Builtup", category_m = "Agriculture")
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
## change the legend names and colors
SL_1990_2020$tb_legend$color <- c("#4472C4", "green", "red", "#ffd60a", "#BF9000")
SL_1990_2020$tb_legend$categoryName <- factor(c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"),
levels = c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"))
## Intensity of changes between builtup and agriculture
testSL <- intensityAnalysis(dataset = SL_1990_2020,
category_n = "Builtup", category_m = "Agriculture")
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
## change the legend names and colors
SL_1990_2020$tb_legend$color <- c("#4472C4", "green", "red", "#fee440", "#BF9000")
SL_1990_2020$tb_legend$categoryName <- factor(c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"),
levels = c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"))
## Intensity of changes between builtup and agriculture
testSL <- intensityAnalysis(dataset = SL_1990_2020,
category_n = "Builtup", category_m = "Agriculture")
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
## change the legend names and colors
SL_1990_2020$tb_legend$color <- c("#00bbf9", "green", "red", "#fee440", "#BF9000")
SL_1990_2020$tb_legend$categoryName <- factor(c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"),
levels = c("Water", "Vegetation", "Builtup", "Agriculture", "Barren"))
## Intensity of changes between builtup and agriculture
testSL <- intensityAnalysis(dataset = SL_1990_2020,
category_n = "Builtup", category_m = "Agriculture")
plot(testSL$category_lvlGain,
labels = c(leftlabel = bquote("Gain Area (" ~ km^2 ~ ")"),
rightlabel = "Intensity Gain (%)"),
marginplot = c(.3, .3), labs = c("Categories", "Uniform Rate"),
leg_curv = c(x = 5/10, y = 5/10))
plot(testSL$interval_lvl,
labels = c(leftlabel = "Interval Change Area (%)",
rightlabel = "Annual Change Area (%)"),
marginplot = c(-8, 0), labs = c("Changes", "Uniform Rate"),
leg_curv = c(x = 2/10, y = 3/10))
testSL$interval_lvl
